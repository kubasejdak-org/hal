Clang_Format:
  extends: .Submodule_Checkout
  stage: quality
  image: ${DOCKER_IMAGE_CLANG}
  tags:
    - cet_build
  needs: []
  script:
    - git add .
    - tools/check-clang-format.sh lib test
    - git diff --color > clang-format.patch
    - |
      if [[ `wc -l < clang-format.patch` != "0" ]]; then
        cat clang-format.patch
        git checkout -- .
        exit 1
      fi

.Clang_Tidy:
  extends: .Submodule_Checkout
  stage: quality
  tags:
    - cet_build
  needs: []
  artifacts:
    name: "${CI_JOB_NAME}_${CI_JOB_ID}"
    expire_in: 2 weeks
    when: always
    paths:
      - ${CI_JOB_NAME}/errors.yml
      - ${CI_JOB_NAME}/compile_commands.json
  script:
    - mkdir ${CI_JOB_NAME}
    - cd ${CI_JOB_NAME}

    # Check build.
    - cmake .. --preset ${Preset}
    - ../tools/check-clang-tidy.sh

.Clang_Tidy_Linux:
  extends: .Clang_Tidy
  image: ${DOCKER_IMAGE_CLANG}

.Clang_Tidy_Linux_ARM:
  extends: .Clang_Tidy
  image: ${DOCKER_IMAGE_ARM_LINUX_CLANG}

EepromSet1_Linux_ARM_Clang_Tidy:
  extends: .Clang_Tidy_Linux_ARM
  variables:
    Preset: "eeprom-set1-linux-arm-clang-debug"

GpioSet1_Linux_ARM_Clang_Tidy:
  extends: .Clang_Tidy_Linux_ARM
  variables:
    Preset: "gpio-set1-linux-arm-clang-debug"

Middleware_Linux_Clang_Tidy:
  extends: .Clang_Tidy_Linux
  variables:
    Preset: "middleware-linux-clang-debug"

PlatformGpio_Linux_ARM_Clang_Tidy:
  extends: .Clang_Tidy_Linux_ARM
  variables:
    Preset: "platform-gpio-linux-arm-clang-debug"

PlatformUart_Linux_ARM_Clang_Tidy:
  extends: .Clang_Tidy_Linux_ARM
  variables:
    Preset: "platform-uart-linux-arm-clang-debug"

RtcSet1_Linux_ARM_Clang_Tidy:
  extends: .Clang_Tidy_Linux_ARM
  variables:
    Preset: "rtc-set1-linux-arm-clang-debug"

SensorSet1_Linux_ARM_Clang_Tidy:
  extends: .Clang_Tidy_Linux_ARM
  variables:
    Preset: "sensor-set1-linux-arm-clang-debug"

Coverage_Total:
  stage: quality
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH && $CI_PIPELINE_SOURCE != "pipeline"
  image: ${DOCKER_IMAGE_GCC}
  tags:
    - cet_build
  needs:
    - EepromSet1_Coverage
    - GpioSet1_Coverage
    - Middleware_Coverage
    - PlatformGpio_Coverage
    - PlatformUart_Coverage
    - RtcSet1_Coverage
    - SensorSet1_Coverage
  artifacts:
    name: "${CI_JOB_NAME}_${CI_JOB_ID}"
    expire_in: 2 weeks
    paths:
      - ${CI_JOB_NAME}
  script:
    - mkdir ${CI_JOB_NAME}
    - cd ${CI_JOB_NAME}

    - |
      lcov -a ../EepromSet1_Coverage/coverage/coverage.info \
           -a ../GpioSet1_Coverage/coverage/coverage.info \
           -a ../Middleware_Coverage/coverage/coverage.info \
           -a ../PlatformGpio_Coverage/coverage/coverage.info \
           -a ../PlatformUart_Coverage/coverage/coverage.info \
           -a ../RtcSet1_Coverage/coverage/coverage.info \
           -a ../SensorSet1_Coverage/coverage/coverage.info \
           -o coverage.info
    - sed -i "s|SF:|SF:${CI_PROJECT_DIR}/|g" coverage.info
    - genhtml coverage.info -o html
    - echo Coverage - `lcov --summary coverage.info | grep lines | cut -d ' ' -f 4`
